{"version":3,"sources":["components/HeaderBreadcrumbs.js","pages/components-overview/Block.js","../node_modules/@mui/lab/TabContext/TabContext.js","../node_modules/@mui/lab/TabList/TabList.js","../node_modules/@mui/lab/TabPanel/tabPanelClasses.js","../node_modules/@mui/lab/TabPanel/TabPanel.js","../node_modules/@mui/lab/DateTimePicker/shared.js","../node_modules/@mui/lab/DateTimePicker/DateTimePickerTabs.js","../node_modules/@mui/lab/DateTimePicker/DateTimePickerToolbar.js","../node_modules/@mui/lab/internal/svg-icons/Time.js","../node_modules/@mui/lab/internal/svg-icons/DateRange.js","../node_modules/@mui/lab/MobileDateTimePicker/MobileDateTimePicker.js","../node_modules/date-fns/esm/isWeekend/index.js","../node_modules/@mui/lab/internal/pickers/wrappers/StaticWrapper.js","../node_modules/@mui/lab/StaticDatePicker/StaticDatePicker.js","pages/components-overview/material-ui/pickers/PickerDate.js","../node_modules/@mui/lab/TimePicker/shared.js","../node_modules/@mui/lab/TimePicker/TimePickerToolbar.js","../node_modules/@mui/lab/DesktopTimePicker/DesktopTimePicker.js","../node_modules/@mui/lab/MobileTimePicker/MobileTimePicker.js","../node_modules/@mui/lab/TimePicker/TimePicker.js","../node_modules/@mui/lab/StaticTimePicker/StaticTimePicker.js","pages/components-overview/material-ui/pickers/PickerTime.js","../node_modules/@mui/lab/DesktopDateTimePicker/DesktopDateTimePicker.js","../node_modules/@mui/lab/DateTimePicker/DateTimePicker.js","pages/components-overview/material-ui/pickers/PickerDateTime.js","../node_modules/@mui/lab/internal/pickers/wrappers/DesktopTooltipWrapper.js","../node_modules/@mui/lab/internal/pickers/wrappers/ResponsiveWrapper.js","../node_modules/@mui/lab/DateRangePicker/DateRangePicker.js","../node_modules/@mui/lab/DesktopDateRangePicker/DesktopDateRangePicker.js","../node_modules/@mui/lab/StaticDateRangePicker/StaticDateRangePicker.js","pages/components-overview/material-ui/pickers/PickerDateRange.js","pages/components-overview/material-ui/pickers/index.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","Label","title","component","color","Block","children","overflow","position","width","p","minHeight","Context","React","TabContext","props","value","idPrefix","id","setId","Math","round","random","useUniquePrefix","context","_jsx","Provider","useTabContext","getPanelId","getTabId","_excluded","TabList","ref","childrenProp","_objectWithoutPropertiesLoose","TypeError","child","Tabs","_extends","getTabPanelUtilityClass","slot","generateUtilityClass","generateUtilityClasses","TabPanelRoot","styled","name","overridesResolver","styles","root","padding","theme","spacing","TabPanel","inProps","useThemeProps","className","ownerState","classes","composeClasses","useUtilityClasses","tabId","clsx","hidden","role","useDateTimePickerDefaultizedProps","_ref","ampm","inputFormat","maxDateProp","maxDate","maxDateTime","maxTime","minDateProp","minDate","minDateTime","minTime","openTo","orientation","views","utils","useUtils","defaultDates","useDefaultDates","willUseAmPm","is12HourCycleInCurrentLocale","Error","ampmInClock","showToolbar","allowSameDateSelection","disableIgnoringDatePartForTimeValidation","Boolean","acceptRegex","mask","disableMaskedInput","pick12hOr24hFormat","localized","formats","keyboardDateTime","keyboardDateTime12h","keyboardDateTime24h","_DateRangeIcon","_TimeIcon","_DateTimePickerToolba","createSvgIcon","_jsxs","d","DateTimePickerTabsRoot","skipSx","boxShadow","palette","divider","wrapperVariant","order","tabsClasses","indicator","bottom","top","DateTimePickerTabs","openView","dateRangeIcon","DateRangeIcon","onChange","timeIcon","TimeIcon","view","WrapperVariantContext","event","Tab","icon","DateTimePickerToolbarRoot","PickersToolbar","paddingLeft","paddingRight","justifyContent","penIcon","right","DateTimePickerToolbarDateContainer","flexDirection","DateTimePickerToolbarTimeContainer","DateTimePickerToolbarSeparator","PickersToolbarText","margin","cursor","DateTimePickerToolbar","time","date","hideTabs","isMobileKeyboardViewOpen","setOpenView","toggleMobileKeyboardView","toolbarFormat","toolbarPlaceholder","toolbarTitle","showTabs","window","innerHeight","dateText","formatByString","format","penIconClassName","isLandscape","PickersToolbarButton","tabIndex","onClick","selected","valueManager","emptyValue","parseInput","parsePickerInputValue","areValuesEqual","a","b","isEqual","MobileDateTimePicker","validationError","useDateTimeValidation","usePickerState","pickerProps","inputProps","wrapperProps","ToolbarComponent","DateInputProps","MobileWrapper","PureDateInputComponent","PureDateInput","Picker","autoFocus","label","isWeekend","dirtyDate","requiredArgs","arguments","toDate","day","getDay","StaticWrapperRoot","minWidth","DIALOG_WIDTH","backgroundColor","background","paper","StaticWrapper","displayStaticWrapperAs","IsStaticVariantContext","StaticDatePicker","useDatePickerDefaultizedProps","useDateValidation","DatePickerToolbar","PickerDate","useState","Date","setValue","Stack","direction","xs","md","DesktopDatePicker","newValue","renderInput","params","TextField","fullWidth","MobileDatePicker","shouldDisableDate","DatePicker","helperText","getTextFieldAriaText","isValid","useTimePickerDefaultizedProps","components","getOpenDialogAriaText","OpenPickerIcon","ClockIcon","fullTime","fullTime12h","fullTime24h","getTimePickerToolbarUtilityClass","timePickerToolbarClasses","TimePickerToolbarRoot","penIconLandscape","marginTop","TimePickerToolbarSeparator","outline","TimePickerToolbarHourMinuteLabel","TimePickerToolbarAmPmSelection","marginRight","marginLeft","flexBasis","ampmLabel","fontSize","TimePickerToolbar","useTheme","showAmPmControl","useMeridiemMode","meridiemMode","handleMeridiemChange","slots","separator","hourMinuteLabel","ampmSelection","viewType","landscapeDirection","arrayIncludes","disableRipple","typographyClassName","getMeridiemText","DesktopTimePicker","useTimeValidation","PopperProps","TransitionComponent","DesktopWrapper","KeyboardDateInputComponent","KeyboardDateInput","MobileTimePicker","TimePicker","cancelText","clearable","clearText","desktopModeMediaQuery","DialogProps","okText","showTodayButton","todayText","useMediaQuery","StaticTimePicker","PickerTime","DesktopDateTimePicker","AllDateInputProps","DateTimePicker","PickerDateTime","valueResponsive","setValueResponsive","DesktopTooltipWrapper","onDismiss","open","inputContainerRef","popperRef","handleBlur","executeInTheNextEventLoopTick","_inputContainerRef$cu","_popperRef$current","current","contains","document","activeElement","inputComponentRef","useForkRef","onBlur","PickersPopper","containerRef","anchorEl","onClose","ResponsiveTooltipWrapper","DateRangePickerInput","rangePickerValueManager","parseRangeInputValue","DateRangePicker","calendars","startText","endText","passedInputFormat","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","pickerStateProps","restProps","useDateRangeValidation","keyboardDate","DateRangePickerView","DesktopDateRangePicker","StaticDateRangePicker","PickerDateRange","startProps","endProps","Box","mx","MobileDateRangePicker","Typography","PICKERS","RootStyle","Page","paddingTop","paddingBottom","PickersComponent","pt","pb","bgcolor","mode","Container","maxWidth","PATH_PAGE","tab","index","String"],"mappings":"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","file":"static/js/57.6c05275f.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import PropTypes from 'prop-types';\n// material\nimport { Card, CardHeader, Box, Typography } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nLabel.propTypes = {\n  title: PropTypes.string\n};\n\nexport function Label({ title }) {\n  return (\n    <Typography variant=\"overline\" component=\"p\" gutterBottom sx={{ color: 'text.secondary' }}>\n      {title}\n    </Typography>\n  );\n}\n\nBlock.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n  sx: PropTypes.object\n};\n\nexport function Block({ title, sx, children }) {\n  return (\n    <Card sx={{ overflow: 'unset', position: 'unset', width: '100%' }}>\n      {title && <CardHeader title={title} />}\n      <Box\n        sx={{\n          p: 3,\n          minHeight: 180,\n          ...sx\n        }}\n      >\n        {children}\n      </Box>\n    </Card>\n  );\n}\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n/**\n * @type {React.Context<{ idPrefix: string; value: string } | null>}\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Context = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== 'production') {\n  Context.displayName = 'TabContext';\n}\n\nfunction useUniquePrefix() {\n  const [id, setId] = React.useState(null);\n  React.useEffect(() => {\n    setId(`mui-p-${Math.round(Math.random() * 1e5)}`);\n  }, []);\n  return id;\n}\n\nexport default function TabContext(props) {\n  const {\n    children,\n    value\n  } = props;\n  const idPrefix = useUniquePrefix();\n  const context = React.useMemo(() => {\n    return {\n      idPrefix,\n      value\n    };\n  }, [idPrefix, value]);\n  return /*#__PURE__*/_jsx(Context.Provider, {\n    value: context,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? TabContext.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The value of the currently selected `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\n/**\n * @returns {unknown}\n */\n\nexport function useTabContext() {\n  return React.useContext(Context);\n}\nexport function getPanelId(context, value) {\n  const {\n    idPrefix\n  } = context;\n\n  if (idPrefix === null) {\n    return null;\n  }\n\n  return `${context.idPrefix}-P-${value}`;\n}\nexport function getTabId(context, value) {\n  const {\n    idPrefix\n  } = context;\n\n  if (idPrefix === null) {\n    return null;\n  }\n\n  return `${context.idPrefix}-T-${value}`;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport { useTabContext, getTabId, getPanelId } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n    children: childrenProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const context = useTabContext();\n\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, _extends({}, other, {\n    ref: ref,\n    value: context.value,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.node\n} : void 0;\nexport default TabList;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getTabPanelUtilityClass(slot) {\n  return generateUtilityClass('MuiTabPanel', slot);\n}\nconst tabPanelClasses = generateUtilityClasses('MuiTabPanel', ['root']);\nexport default tabPanelClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTabPanelUtilityClass, classes);\n};\n\nconst TabPanelRoot = styled('div', {\n  name: 'MuiTabPanel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(3)\n}));\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTabPanel'\n  });\n\n  const {\n    children,\n    className,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props);\n\n  const classes = useUtilityClasses(ownerState);\n  const context = useTabContext();\n\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n\n  const id = getPanelId(context, value);\n  const tabId = getTabId(context, value);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({\n    \"aria-labelledby\": tabId,\n    className: clsx(classes.root, className),\n    hidden: value !== context.value,\n    id: id,\n    ref: ref,\n    role: \"tabpanel\",\n    ownerState: ownerState\n  }, other, {\n    children: value === context.value && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\n   * no `value` was passed to `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\nexport default TabPanel;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"inputFormat\", \"maxDate\", \"maxDateTime\", \"maxTime\", \"minDate\", \"minDateTime\", \"minTime\", \"openTo\", \"orientation\", \"views\"];\nimport { useThemeProps } from '@mui/material/styles';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { pick12hOr24hFormat } from '../internal/pickers/text-field-helper';\nexport function useDateTimePickerDefaultizedProps(_ref, name) {\n  let {\n    ampm,\n    inputFormat,\n    maxDate: maxDateProp,\n    maxDateTime,\n    maxTime,\n    minDate: minDateProp,\n    minDateTime,\n    minTime,\n    openTo = 'day',\n    orientation = 'portrait',\n    views = ['year', 'day', 'hours', 'minutes']\n  } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const willUseAmPm = ampm != null ? ampm : utils.is12HourCycleInCurrentLocale();\n\n  if (orientation !== 'portrait') {\n    throw new Error('We are not supporting custom orientation for DateTimePicker yet :(');\n  }\n\n  return useThemeProps({\n    props: _extends({\n      openTo,\n      views,\n      ampm: willUseAmPm,\n      ampmInClock: true,\n      orientation,\n      showToolbar: true,\n      allowSameDateSelection: true,\n      minDate: minDateTime != null ? minDateTime : minDate,\n      minTime: minDateTime != null ? minDateTime : minTime,\n      maxDate: maxDateTime != null ? maxDateTime : maxDate,\n      maxTime: maxDateTime != null ? maxDateTime : maxTime,\n      disableIgnoringDatePartForTimeValidation: Boolean(minDateTime || maxDateTime),\n      acceptRegex: willUseAmPm ? /[\\dap]/gi : /\\d/gi,\n      mask: '__/__/____ __:__',\n      disableMaskedInput: willUseAmPm,\n      inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n        localized: utils.formats.keyboardDateTime,\n        '12h': utils.formats.keyboardDateTime12h,\n        '24h': utils.formats.keyboardDateTime24h\n      })\n    }, other),\n    name\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _DateRangeIcon, _TimeIcon;\n\nimport * as React from 'react';\nimport Tab from '@mui/material/Tab';\nimport Tabs, { tabsClasses } from '@mui/material/Tabs';\nimport { styled } from '@mui/material/styles';\nimport TimeIcon from '../internal/svg-icons/Time';\nimport DateRangeIcon from '../internal/svg-icons/DateRange';\nimport { WrapperVariantContext } from '../internal/pickers/wrappers/WrapperVariantContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst viewToTab = openView => {\n  // TODO: what happens if `openView` is `month`?\n  if (openView === 'day' || openView === 'year') {\n    return 'date';\n  }\n\n  return 'time';\n};\n\nconst tabToView = tab => {\n  if (tab === 'date') {\n    return 'day';\n  }\n\n  return 'hours';\n};\n\nconst DateTimePickerTabsRoot = styled(Tabs, {\n  skipSx: true\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  boxShadow: `0 -1px 0 0 inset ${theme.palette.divider}`\n}, ownerState.wrapperVariant === 'desktop' && {\n  order: 1,\n  boxShadow: `0 1px 0 0 inset ${theme.palette.divider}`,\n  [`& .${tabsClasses.indicator}`]: {\n    bottom: 'auto',\n    top: 0\n  }\n}));\n/**\n * @ignore - internal component.\n */\n\nconst DateTimePickerTabs = props => {\n  const {\n    dateRangeIcon = _DateRangeIcon || (_DateRangeIcon = /*#__PURE__*/_jsx(DateRangeIcon, {})),\n    onChange,\n    timeIcon = _TimeIcon || (_TimeIcon = /*#__PURE__*/_jsx(TimeIcon, {})),\n    view\n  } = props;\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n\n  const ownerState = _extends({}, props, {\n    wrapperVariant\n  });\n\n  const handleChange = (event, value) => {\n    onChange(tabToView(value));\n  };\n\n  return /*#__PURE__*/_jsxs(DateTimePickerTabsRoot, {\n    ownerState: ownerState,\n    variant: \"fullWidth\",\n    value: viewToTab(view),\n    onChange: handleChange,\n    children: [/*#__PURE__*/_jsx(Tab, {\n      value: \"date\",\n      \"aria-label\": \"pick date\",\n      icon: /*#__PURE__*/_jsx(React.Fragment, {\n        children: dateRangeIcon\n      })\n    }), /*#__PURE__*/_jsx(Tab, {\n      value: \"time\",\n      \"aria-label\": \"pick time\",\n      icon: /*#__PURE__*/_jsx(React.Fragment, {\n        children: timeIcon\n      })\n    })]\n  });\n};\n\nexport default DateTimePickerTabs;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _DateTimePickerToolba;\n\nconst _excluded = [\"ampm\", \"date\", \"dateRangeIcon\", \"hideTabs\", \"isMobileKeyboardViewOpen\", \"onChange\", \"openView\", \"setOpenView\", \"timeIcon\", \"toggleMobileKeyboardView\", \"toolbarFormat\", \"toolbarPlaceholder\", \"toolbarTitle\"];\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { generateUtilityClasses } from '@mui/core';\nimport PickersToolbarText from '../internal/pickers/PickersToolbarText';\nimport PickersToolbar from '../internal/pickers/PickersToolbar';\nimport PickersToolbarButton from '../internal/pickers/PickersToolbarButton';\nimport DateTimePickerTabs from './DateTimePickerTabs';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { WrapperVariantContext } from '../internal/pickers/wrappers/WrapperVariantContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst classes = generateUtilityClasses('PrivateDateTimePickerToolbar', ['penIcon']);\nconst DateTimePickerToolbarRoot = styled(PickersToolbar, {\n  skipSx: true\n})({\n  paddingLeft: 16,\n  paddingRight: 16,\n  justifyContent: 'space-around',\n  [`& .${classes.penIcon}`]: {\n    position: 'absolute',\n    top: 8,\n    right: 8\n  }\n});\nconst DateTimePickerToolbarDateContainer = styled('div', {\n  skipSx: true\n})({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start'\n});\nconst DateTimePickerToolbarTimeContainer = styled('div', {\n  skipSx: true\n})({\n  display: 'flex'\n});\nconst DateTimePickerToolbarSeparator = styled(PickersToolbarText, {\n  skipSx: true\n})({\n  margin: '0 4px 0 2px',\n  cursor: 'default'\n});\n/**\n * @ignore - internal component.\n */\n\nconst DateTimePickerToolbar = props => {\n  const {\n    ampm,\n    date,\n    dateRangeIcon,\n    hideTabs,\n    isMobileKeyboardViewOpen,\n    openView,\n    setOpenView,\n    timeIcon,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarPlaceholder = '––',\n    toolbarTitle = 'Select date & time'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const showTabs = wrapperVariant === 'desktop' ? true : !hideTabs && typeof window !== 'undefined' && window.innerHeight > 667;\n\n  const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');\n\n  const dateText = React.useMemo(() => {\n    if (!date) {\n      return toolbarPlaceholder;\n    }\n\n    if (toolbarFormat) {\n      return utils.formatByString(date, toolbarFormat);\n    }\n\n    return utils.format(date, 'shortDate');\n  }, [date, toolbarFormat, toolbarPlaceholder, utils]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [wrapperVariant !== 'desktop' && /*#__PURE__*/_jsxs(DateTimePickerToolbarRoot, _extends({\n      toolbarTitle: toolbarTitle,\n      penIconClassName: classes.penIcon,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView\n    }, other, {\n      isLandscape: false,\n      children: [/*#__PURE__*/_jsxs(DateTimePickerToolbarDateContainer, {\n        children: [/*#__PURE__*/_jsx(PickersToolbarButton, {\n          tabIndex: -1,\n          variant: \"subtitle1\",\n          onClick: () => setOpenView('year'),\n          selected: openView === 'year',\n          value: date ? utils.format(date, 'year') : '–'\n        }), /*#__PURE__*/_jsx(PickersToolbarButton, {\n          tabIndex: -1,\n          variant: \"h4\",\n          onClick: () => setOpenView('day'),\n          selected: openView === 'day',\n          value: dateText\n        })]\n      }), /*#__PURE__*/_jsxs(DateTimePickerToolbarTimeContainer, {\n        children: [/*#__PURE__*/_jsx(PickersToolbarButton, {\n          variant: \"h3\",\n          onClick: () => setOpenView('hours'),\n          selected: openView === 'hours',\n          value: date ? formatHours(date) : '--'\n        }), _DateTimePickerToolba || (_DateTimePickerToolba = /*#__PURE__*/_jsx(DateTimePickerToolbarSeparator, {\n          variant: \"h3\",\n          value: \":\"\n        })), /*#__PURE__*/_jsx(PickersToolbarButton, {\n          variant: \"h3\",\n          onClick: () => setOpenView('minutes'),\n          selected: openView === 'minutes',\n          value: date ? utils.format(date, 'minutes') : '--'\n        })]\n      })]\n    })), showTabs && /*#__PURE__*/_jsx(DateTimePickerTabs, {\n      dateRangeIcon: dateRangeIcon,\n      timeIcon: timeIcon,\n      view: openView,\n      onChange: setOpenView\n    })]\n  });\n};\n\nexport default DateTimePickerToolbar;","import * as React from 'react';\nimport { createSvgIcon } from '@mui/material/utils';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsxs(React.Fragment, {\n  children: [/*#__PURE__*/_jsx(\"path\", {\n    d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n  }), /*#__PURE__*/_jsx(\"path\", {\n    d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n  })]\n}), 'Time');","import * as React from 'react';\nimport { createSvgIcon } from '@mui/material/utils';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"\n}), 'DateRange');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDateTimePickerDefaultizedProps } from '../DateTimePicker/shared';\nimport DateTimePickerToolbar from '../DateTimePicker/DateTimePickerToolbar';\nimport MobileWrapper from '../internal/pickers/wrappers/MobileWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { PureDateInput } from '../internal/pickers/PureDateInput';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/date-time-picker/)\n *\n * API:\n *\n * - [MobileDateTimePicker API](https://mui.com/api/mobile-date-time-picker/)\n */\nconst MobileDateTimePicker = /*#__PURE__*/React.forwardRef(function MobileDateTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDateTimePickerDefaultizedProps(inProps, 'MuiMobileDateTimePicker');\n  const validationError = useDateTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DateTimePickerToolbar\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, other, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInput,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']).isRequired)\n} : void 0;\nexport default MobileDateTimePicker;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date falls on a weekend\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * const result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\n\nexport default function isWeekend(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { DIALOG_WIDTH } from '../constants/dimensions';\nimport { WrapperVariantContext, IsStaticVariantContext } from './WrapperVariantContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst StaticWrapperRoot = styled('div', {\n  skipSx: true\n})(({\n  theme\n}) => ({\n  overflow: 'hidden',\n  minWidth: DIALOG_WIDTH,\n  display: 'flex',\n  flexDirection: 'column',\n  backgroundColor: theme.palette.background.paper\n}));\n\nfunction StaticWrapper(props) {\n  const {\n    displayStaticWrapperAs,\n    children\n  } = props;\n  const isStatic = true;\n  return /*#__PURE__*/_jsx(IsStaticVariantContext.Provider, {\n    value: isStatic,\n    children: /*#__PURE__*/_jsx(WrapperVariantContext.Provider, {\n      value: displayStaticWrapperAs,\n      children: /*#__PURE__*/_jsx(StaticWrapperRoot, {\n        children: children\n      })\n    })\n  });\n}\n\nexport default StaticWrapper;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\", \"displayStaticWrapperAs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport DatePickerToolbar from '../DatePicker/DatePickerToolbar';\nimport StaticWrapper from '../internal/pickers/wrappers/StaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Picker](https://mui.com/components/date-picker/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/api/static-date-picker/)\n */\nconst StaticDatePicker = /*#__PURE__*/React.forwardRef(function StaticDatePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDatePickerDefaultizedProps(inProps, 'MuiStaticDatePicker');\n  const validationError = useDateValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DatePickerToolbar,\n    displayStaticWrapperAs = 'mobile'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(StaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDatePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;\nexport default StaticDatePicker;","import { useState } from 'react';\nimport isWeekend from 'date-fns/isWeekend';\n// material\nimport { TextField, Stack } from '@mui/material';\nimport { DatePicker, StaticDatePicker, MobileDatePicker, DesktopDatePicker } from '@mui/lab';\n//\nimport { Block } from '../../Block';\n\n// ----------------------------------------------------------------------\n\nexport default function PickerDate() {\n  const [value, setValue] = useState(new Date());\n\n  return (\n    <Stack spacing={3} direction={{ xs: 'column', md: 'row' }}>\n      <Stack spacing={3} sx={{ width: '100%' }}>\n        <Block title=\"Basic\">\n          <DesktopDatePicker\n            label=\"For desktop\"\n            value={value}\n            minDate={new Date('2017-01-01')}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField fullWidth {...params} margin=\"normal\" />}\n          />\n\n          <MobileDatePicker\n            orientation=\"portrait\"\n            label=\"For mobile\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField fullWidth {...params} margin=\"normal\" />}\n          />\n        </Block>\n\n        <Block title=\"Static mode\">\n          <StaticDatePicker\n            orientation=\"landscape\"\n            openTo=\"day\"\n            value={value}\n            shouldDisableDate={isWeekend}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField {...params} />}\n          />\n        </Block>\n      </Stack>\n\n      <Block title=\"Views playground\">\n        <DatePicker\n          views={['year']}\n          label=\"Year only\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth margin=\"normal\" helperText={null} />}\n        />\n        <DatePicker\n          views={['year', 'month']}\n          label=\"Year and Month\"\n          minDate={new Date('2012-03-01')}\n          maxDate={new Date('2023-06-01')}\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth margin=\"normal\" helperText={null} />}\n        />\n        <DatePicker\n          openTo=\"year\"\n          views={['year', 'month', 'day']}\n          label=\"Year, month and date\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth margin=\"normal\" helperText={null} />}\n        />\n        <DatePicker\n          views={['day', 'month', 'year']}\n          label=\"Invert the order of views\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth margin=\"normal\" helperText={null} />}\n        />\n        <DatePicker\n          views={['day']}\n          label=\"Just date\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth margin=\"normal\" helperText={null} />}\n        />\n      </Block>\n    </Stack>\n  );\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"components\", \"inputFormat\", \"openTo\", \"views\"];\nimport { useThemeProps } from '@mui/material/styles';\nimport ClockIcon from '../internal/svg-icons/Clock';\nimport { pick12hOr24hFormat } from '../internal/pickers/text-field-helper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\n\nfunction getTextFieldAriaText(value, utils) {\n  return value && utils.isValid(utils.date(value)) ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}` : 'Choose time';\n}\n\nexport function useTimePickerDefaultizedProps(_ref, name) {\n  let {\n    ampm,\n    components,\n    inputFormat,\n    openTo = 'hours',\n    views = ['hours', 'minutes']\n  } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const utils = useUtils();\n  const willUseAmPm = ampm != null ? ampm : utils.is12HourCycleInCurrentLocale();\n  return useThemeProps({\n    props: _extends({\n      views,\n      openTo,\n      ampm: willUseAmPm,\n      acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n      mask: '__:__',\n      disableMaskedInput: willUseAmPm,\n      getOpenDialogAriaText: getTextFieldAriaText,\n      components: _extends({\n        OpenPickerIcon: ClockIcon\n      }, components),\n      inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n        localized: utils.formats.fullTime,\n        '12h': utils.formats.fullTime12h,\n        '24h': utils.formats.fullTime24h\n      })\n    }, other),\n    name\n  });\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"ampm\", \"ampmInClock\", \"date\", \"isLandscape\", \"isMobileKeyboardViewOpen\", \"onChange\", \"openView\", \"setOpenView\", \"toggleMobileKeyboardView\", \"toolbarTitle\", \"views\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { useTheme, styled } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@mui/core';\nimport PickersToolbarText from '../internal/pickers/PickersToolbarText';\nimport PickersToolbarButton from '../internal/pickers/PickersToolbarButton';\nimport PickersToolbar from '../internal/pickers/PickersToolbar';\nimport { arrayIncludes } from '../internal/pickers/utils';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useMeridiemMode } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function getTimePickerToolbarUtilityClass(slot) {\n  return generateUtilityClass('PrivateTimePickerToolbar', slot);\n}\nexport const timePickerToolbarClasses = generateUtilityClasses('PrivateTimePickerToolbar', ['separator', 'hourMinuteLabel', 'hourMinuteLabelLandscape', 'hourMinuteLabelReverse', 'ampmSelection', 'ampmLandscape', 'ampmLabel', 'penIconLandscape']);\n\nconst useUtilityClasses = ownerState => {\n  const {\n    theme,\n    isLandscape,\n    classes\n  } = ownerState;\n  const slots = {\n    penIconLandscape: ['penIconLandscape'],\n    separator: ['separator'],\n    hourMinuteLabel: ['hourMinuteLabel', isLandscape && 'hourMinuteLabelLandscape', theme.direction === 'rtl' && 'hourMinuteLabelReverse'],\n    ampmSelection: ['ampmSelection', isLandscape && 'ampmLandscape'],\n    ampmLabel: ['ampmLabel']\n  };\n  return composeClasses(slots, getTimePickerToolbarUtilityClass, classes);\n};\n\nconst TimePickerToolbarRoot = styled(PickersToolbar, {\n  skipSx: true\n})({\n  [`& .${timePickerToolbarClasses.penIconLandscape}`]: {\n    marginTop: 'auto'\n  }\n});\nconst TimePickerToolbarSeparator = styled(PickersToolbarText, {\n  skipSx: true\n})({\n  outline: 0,\n  margin: '0 4px 0 2px',\n  cursor: 'default'\n});\nconst TimePickerToolbarHourMinuteLabel = styled('div', {\n  skipSx: true\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'flex',\n  justifyContent: 'flex-end',\n  alignItems: 'flex-end'\n}, ownerState.isLandscape && {\n  marginTop: 'auto'\n}, theme.direction === 'rtl' && {\n  flexDirection: 'row-reverse'\n}));\nconst TimePickerToolbarAmPmSelection = styled('div', {\n  skipSx: true\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  flexDirection: 'column',\n  marginRight: 'auto',\n  marginLeft: 12\n}, ownerState.isLandscape && {\n  margin: '4px 0 auto',\n  flexDirection: 'row',\n  justifyContent: 'space-around',\n  flexBasis: '100%'\n}, {\n  [`& .${timePickerToolbarClasses.ampmLabel}`]: {\n    fontSize: 17\n  }\n}));\n/**\n * @ignore - internal component.\n */\n\nconst TimePickerToolbar = props => {\n  const {\n    ampm,\n    ampmInClock,\n    date,\n    isLandscape,\n    isMobileKeyboardViewOpen,\n    onChange,\n    openView,\n    setOpenView,\n    toggleMobileKeyboardView,\n    toolbarTitle = 'Select time',\n    views\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const theme = useTheme();\n  const showAmPmControl = Boolean(ampm && !ampmInClock);\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(date, ampm, onChange);\n\n  const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');\n\n  const ownerState = props;\n  const classes = useUtilityClasses(_extends({}, ownerState, {\n    theme\n  }));\n\n  const separator = /*#__PURE__*/_jsx(TimePickerToolbarSeparator, {\n    tabIndex: -1,\n    value: \":\",\n    variant: \"h3\",\n    selected: false,\n    className: classes.separator\n  });\n\n  return /*#__PURE__*/_jsxs(TimePickerToolbarRoot, _extends({\n    viewType: \"clock\",\n    landscapeDirection: \"row\",\n    toolbarTitle: toolbarTitle,\n    isLandscape: isLandscape,\n    isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: toggleMobileKeyboardView,\n    ownerState: ownerState,\n    penIconClassName: clsx(isLandscape && classes.penIconLandscape)\n  }, other, {\n    children: [/*#__PURE__*/_jsxs(TimePickerToolbarHourMinuteLabel, {\n      className: classes.hourMinuteLabel,\n      ownerState: ownerState,\n      children: [arrayIncludes(views, 'hours') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n        tabIndex: -1,\n        variant: \"h3\",\n        onClick: () => setOpenView('hours'),\n        selected: openView === 'hours',\n        value: date ? formatHours(date) : '--'\n      }), arrayIncludes(views, ['hours', 'minutes']) && separator, arrayIncludes(views, 'minutes') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n        tabIndex: -1,\n        variant: \"h3\",\n        onClick: () => setOpenView('minutes'),\n        selected: openView === 'minutes',\n        value: date ? utils.format(date, 'minutes') : '--'\n      }), arrayIncludes(views, ['minutes', 'seconds']) && separator, arrayIncludes(views, 'seconds') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n        variant: \"h3\",\n        onClick: () => setOpenView('seconds'),\n        selected: openView === 'seconds',\n        value: date ? utils.format(date, 'seconds') : '--'\n      })]\n    }), showAmPmControl && /*#__PURE__*/_jsxs(TimePickerToolbarAmPmSelection, {\n      className: classes.ampmSelection,\n      ownerState: ownerState,\n      children: [/*#__PURE__*/_jsx(PickersToolbarButton, {\n        disableRipple: true,\n        variant: \"subtitle2\",\n        selected: meridiemMode === 'am',\n        typographyClassName: classes.ampmLabel,\n        value: utils.getMeridiemText('am'),\n        onClick: () => handleMeridiemChange('am')\n      }), /*#__PURE__*/_jsx(PickersToolbarButton, {\n        disableRipple: true,\n        variant: \"subtitle2\",\n        selected: meridiemMode === 'pm',\n        typographyClassName: classes.ampmLabel,\n        value: utils.getMeridiemText('pm'),\n        onClick: () => handleMeridiemChange('pm')\n      })]\n    })]\n  }));\n};\n\nexport default TimePickerToolbar;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport TimePickerToolbar from '../TimePicker/TimePickerToolbar';\nimport DesktopWrapper from '../internal/pickers/wrappers/DesktopWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { KeyboardDateInput } from '../internal/pickers/KeyboardDateInput';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/api/desktop-time-picker/)\n */\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    PopperProps,\n    ToolbarComponent = TimePickerToolbar,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    OpenPickerIcon: PropTypes.elementType\n  }),\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default DesktopTimePicker;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport TimePickerToolbar from '../TimePicker/TimePickerToolbar';\nimport MobileWrapper from '../internal/pickers/wrappers/MobileWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { PureDateInput } from '../internal/pickers/PureDateInput';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [MobileTimePicker API](https://mui.com/api/mobile-time-picker/)\n */\nconst MobileTimePicker = /*#__PURE__*/React.forwardRef(function MobileTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiMobileTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = TimePickerToolbar\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, other, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInput,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    OpenPickerIcon: PropTypes.elementType\n  }),\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default MobileTimePicker;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"cancelText\", \"clearable\", \"clearText\", \"desktopModeMediaQuery\", \"DialogProps\", \"okText\", \"PopperProps\", \"showTodayButton\", \"todayText\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport PropTypes from 'prop-types';\nimport DesktopTimePicker from '../DesktopTimePicker';\nimport MobileTimePicker from '../MobileTimePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n *\n * Demos:\n *\n * - [Pickers](https://mui.com/components/pickers/)\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [TimePicker API](https://mui.com/api/time-picker/)\n */\nconst TimePicker = /*#__PURE__*/React.forwardRef(function TimePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTimePicker'\n  });\n\n  const {\n    cancelText,\n    clearable,\n    clearText,\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    okText,\n    PopperProps,\n    showTodayButton,\n    todayText,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery);\n  return isDesktop ? /*#__PURE__*/_jsx(DesktopTimePicker, _extends({\n    ref: ref,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent\n  }, other)) : /*#__PURE__*/_jsx(MobileTimePicker, _extends({\n    ref: ref,\n    cancelText: cancelText,\n    clearable: clearable,\n    clearText: clearText,\n    DialogProps: DialogProps,\n    okText: okText,\n    showTodayButton: showTodayButton,\n    todayText: todayText\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    OpenPickerIcon: PropTypes.elementType\n  }),\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default TimePicker;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"displayStaticWrapperAs\", \"onChange\", \"ToolbarComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport TimePickerToolbar from '../TimePicker/TimePickerToolbar';\nimport StaticWrapper from '../internal/pickers/wrappers/StaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://mui.com/api/static-time-picker/)\n */\nconst StaticTimePicker = /*#__PURE__*/React.forwardRef(function StaticTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiStaticTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    displayStaticWrapperAs = 'mobile',\n    ToolbarComponent = TimePickerToolbar\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(StaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    OpenPickerIcon: PropTypes.elementType\n  }),\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default StaticTimePicker;","import { useState } from 'react';\n// material\nimport { TextField, Stack } from '@mui/material';\nimport { TimePicker, MobileTimePicker, StaticTimePicker, DesktopTimePicker } from '@mui/lab';\n//\nimport { Block } from '../../Block';\n\n// ----------------------------------------------------------------------\n\nexport default function PickerTime() {\n  const [value, setValue] = useState(new Date());\n\n  return (\n    <Stack spacing={3} direction={{ xs: 'column', md: 'row' }}>\n      <Stack spacing={3} sx={{ width: 1 }}>\n        <Block title=\"Basic\">\n          <TimePicker\n            label=\"12 hours\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField fullWidth {...params} margin=\"normal\" />}\n          />\n          <TimePicker\n            ampm={false}\n            label=\"24 hours\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField fullWidth {...params} margin=\"normal\" />}\n          />\n        </Block>\n\n        <Block title=\"Responsiveness\">\n          <MobileTimePicker\n            orientation=\"portrait\"\n            label=\"For mobile\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField {...params} fullWidth margin=\"normal\" />}\n          />\n          <DesktopTimePicker\n            label=\"For desktop\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField {...params} margin=\"normal\" fullWidth />}\n          />\n          <TimePicker\n            value={value}\n            onChange={setValue}\n            renderInput={(params) => <TextField {...params} margin=\"normal\" fullWidth />}\n          />\n        </Block>\n      </Stack>\n\n      <Block title=\"Static mode\">\n        <Stack spacing={3}>\n          <StaticTimePicker\n            orientation=\"portrait\"\n            displayStaticWrapperAs=\"mobile\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField {...params} />}\n          />\n\n          <StaticTimePicker\n            ampm\n            orientation=\"landscape\"\n            openTo=\"minutes\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(params) => <TextField {...params} />}\n          />\n        </Stack>\n      </Block>\n    </Stack>\n  );\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDateTimePickerDefaultizedProps } from '../DateTimePicker/shared';\nimport DateTimePickerToolbar from '../DateTimePicker/DateTimePickerToolbar';\nimport DesktopWrapper from '../internal/pickers/wrappers/DesktopWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { KeyboardDateInput } from '../internal/pickers/KeyboardDateInput';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/date-time-picker/)\n *\n * API:\n *\n * - [DesktopDateTimePicker API](https://mui.com/api/desktop-date-time-picker/)\n */\nconst DesktopDateTimePicker = /*#__PURE__*/React.forwardRef(function DesktopDateTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDateTimePickerDefaultizedProps(inProps, 'MuiDesktopDateTimePicker');\n  const validationError = useDateTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    PopperProps,\n    ToolbarComponent = DateTimePickerToolbar,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const AllDateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: AllDateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: AllDateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDateTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']).isRequired)\n} : void 0;\nexport default DesktopDateTimePicker;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"cancelText\", \"clearable\", \"clearText\", \"desktopModeMediaQuery\", \"DialogProps\", \"okText\", \"PopperProps\", \"showTodayButton\", \"todayText\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport PropTypes from 'prop-types';\nimport DesktopDateTimePicker from '../DesktopDateTimePicker';\nimport MobileDateTimePicker from '../MobileDateTimePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/date-time-picker/)\n * - [Pickers](https://mui.com/components/pickers/)\n *\n * API:\n *\n * - [DateTimePicker API](https://mui.com/api/date-time-picker/)\n */\nconst DateTimePicker = /*#__PURE__*/React.forwardRef(function DateTimePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateTimePicker'\n  });\n\n  const {\n    cancelText,\n    clearable,\n    clearText,\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    okText,\n    PopperProps,\n    showTodayButton,\n    todayText,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery);\n  return isDesktop ? /*#__PURE__*/_jsx(DesktopDateTimePicker, _extends({\n    ref: ref,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent\n  }, other)) : /*#__PURE__*/_jsx(MobileDateTimePicker, _extends({\n    ref: ref,\n    cancelText: cancelText,\n    clearable: clearable,\n    clearText: clearText,\n    DialogProps: DialogProps,\n    okText: okText,\n    showTodayButton: showTodayButton,\n    todayText: todayText\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']).isRequired)\n} : void 0;\nexport default DateTimePicker;","import { useState } from 'react';\n// material\nimport { TextField, Stack } from '@mui/material';\nimport { DateTimePicker, MobileDateTimePicker, DesktopDateTimePicker } from '@mui/lab';\n//\nimport { Block } from '../../Block';\n\n// ----------------------------------------------------------------------\n\nexport default function PickerDateTime() {\n  const [value, setValue] = useState(new Date());\n  const [valueResponsive, setValueResponsive] = useState(new Date('2018-01-01T00:00:00.000Z'));\n\n  return (\n    <Stack spacing={3} direction={{ xs: 'column', md: 'row' }}>\n      <Block title=\"Basic\">\n        <DateTimePicker\n          renderInput={(props) => <TextField {...props} fullWidth />}\n          label=\"DateTimePicker\"\n          value={value}\n          onChange={setValue}\n        />\n      </Block>\n\n      <Block title=\"Responsiveness\">\n        <MobileDateTimePicker\n          value={valueResponsive}\n          onChange={(newValue) => {\n            setValueResponsive(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth margin=\"normal\" />}\n        />\n        <DesktopDateTimePicker\n          value={valueResponsive}\n          onChange={(newValue) => {\n            setValueResponsive(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} margin=\"normal\" fullWidth />}\n        />\n        <DateTimePicker\n          value={valueResponsive}\n          onChange={(newValue) => {\n            setValueResponsive(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} margin=\"normal\" fullWidth />}\n        />\n      </Block>\n    </Stack>\n  );\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { WrapperVariantContext } from './WrapperVariantContext';\nimport { executeInTheNextEventLoopTick } from '../utils';\nimport PickersPopper from '../PickersPopper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction DesktopTooltipWrapper(props) {\n  const {\n    children,\n    DateInputProps,\n    KeyboardDateInputComponent,\n    onDismiss,\n    open,\n    PopperProps,\n    TransitionComponent\n  } = props;\n  const inputContainerRef = React.useRef(null);\n  const popperRef = React.useRef(null);\n\n  const handleBlur = () => {\n    executeInTheNextEventLoopTick(() => {\n      var _inputContainerRef$cu, _popperRef$current;\n\n      if ((_inputContainerRef$cu = inputContainerRef.current) != null && _inputContainerRef$cu.contains(document.activeElement) || (_popperRef$current = popperRef.current) != null && _popperRef$current.contains(document.activeElement)) {\n        return;\n      }\n\n      onDismiss();\n    });\n  };\n\n  const inputComponentRef = useForkRef(DateInputProps.ref, inputContainerRef);\n  return /*#__PURE__*/_jsxs(WrapperVariantContext.Provider, {\n    value: \"desktop\",\n    children: [/*#__PURE__*/_jsx(KeyboardDateInputComponent, _extends({}, DateInputProps, {\n      ref: inputComponentRef,\n      onBlur: handleBlur\n    })), /*#__PURE__*/_jsx(PickersPopper, {\n      role: \"tooltip\",\n      open: open,\n      containerRef: popperRef,\n      anchorEl: inputContainerRef.current,\n      TransitionComponent: TransitionComponent,\n      PopperProps: PopperProps,\n      onBlur: handleBlur,\n      onClose: onDismiss,\n      children: children\n    })]\n  });\n}\n\nexport default DesktopTooltipWrapper;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"cancelText\", \"clearable\", \"clearText\", \"DateInputProps\", \"desktopModeMediaQuery\", \"DialogProps\", \"KeyboardDateInputComponent\", \"okText\", \"PopperProps\", \"PureDateInputComponent\", \"showTodayButton\", \"todayText\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport MobileWrapper from './MobileWrapper';\nimport DesktopTooltipWrapper from './DesktopTooltipWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function ResponsiveTooltipWrapper(props) {\n  const {\n    cancelText,\n    clearable,\n    clearText,\n    DateInputProps,\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    KeyboardDateInputComponent,\n    okText,\n    PopperProps,\n    PureDateInputComponent,\n    showTodayButton,\n    todayText,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery);\n  return isDesktop ? /*#__PURE__*/_jsx(DesktopTooltipWrapper, _extends({\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent\n  }, other)) : /*#__PURE__*/_jsx(MobileWrapper, _extends({\n    cancelText: cancelText,\n    clearable: clearable,\n    clearText: clearText,\n    DateInputProps: DateInputProps,\n    DialogProps: DialogProps,\n    okText: okText,\n    PureDateInputComponent: PureDateInputComponent,\n    showTodayButton: showTodayButton,\n    todayText: todayText\n  }, other));\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport { ResponsiveTooltipWrapper } from '../internal/pickers/wrappers/ResponsiveWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from './DateRangePickerView';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/api/date-range-picker/)\n */\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(ResponsiveTooltipWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up('sm')\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DateRangePicker;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\", \"PopperProps\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport DesktopTooltipWrapper from '../internal/pickers/wrappers/DesktopTooltipWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [DesktopDateRangePicker API](https://mui.com/api/desktop-date-range-picker/)\n */\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDesktopDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp,\n    PopperProps,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(DesktopTooltipWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DesktopDateRangePicker;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"displayStaticWrapperAs\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport StaticWrapper from '../internal/pickers/wrappers/StaticWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://mui.com/api/static-date-range-picker/)\n */\nconst StaticDateRangePicker = /*#__PURE__*/React.forwardRef(function StaticDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiStaticDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    displayStaticWrapperAs = 'mobile',\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(StaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default StaticDateRangePicker;","import { useState } from 'react';\n// material\nimport { Box, TextField, Typography, Stack } from '@mui/material';\nimport { DateRangePicker, MobileDateRangePicker, DesktopDateRangePicker, StaticDateRangePicker } from '@mui/lab';\n//\nimport { Block } from '../../Block';\n\n// ----------------------------------------------------------------------\n\nexport default function PickerDateRange() {\n  const [value, setValue] = useState([null, null]);\n\n  return (\n    <Stack spacing={3} direction={{ xs: 'column', md: 'row' }}>\n      <Stack spacing={3} sx={{ width: 1 }}>\n        <Block title=\"Basic\">\n          <DateRangePicker\n            startText=\"Check-in\"\n            endText=\"Check-out\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <>\n                <TextField {...startProps} />\n                <Box sx={{ mx: 2 }}>to</Box>\n                <TextField {...endProps} />\n              </>\n            )}\n          />\n        </Block>\n\n        <Block title=\"Responsiveness\">\n          <MobileDateRangePicker\n            startText=\"Mobile start\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <>\n                <TextField {...startProps} />\n                <Box sx={{ mx: 2 }}> to </Box>\n                <TextField {...endProps} />\n              </>\n            )}\n          />\n          <br />\n\n          <DesktopDateRangePicker\n            startText=\"Desktop start\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <>\n                <TextField {...startProps} />\n                <Box sx={{ mx: 2 }}> to </Box>\n                <TextField {...endProps} />\n              </>\n            )}\n          />\n        </Block>\n\n        <Block title=\"Different number of months\">\n          <Typography gutterBottom> 1 calendar </Typography>\n          <DateRangePicker\n            calendars={1}\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <>\n                <TextField {...startProps} />\n                <Box sx={{ mx: 2 }}>to</Box>\n                <TextField {...endProps} />\n              </>\n            )}\n          />\n\n          <br />\n\n          <Typography gutterBottom> 2 calendars</Typography>\n          <DateRangePicker\n            calendars={2}\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <>\n                <TextField {...startProps} />\n                <Box sx={{ mx: 2 }}>to</Box>\n                <TextField {...endProps} />\n              </>\n            )}\n          />\n\n          <br />\n\n          <Typography gutterBottom> 3 calendars</Typography>\n          <DateRangePicker\n            calendars={3}\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <>\n                <TextField {...startProps} />\n                <Box sx={{ mx: 2 }}>to</Box>\n                <TextField {...endProps} />\n              </>\n            )}\n          />\n        </Block>\n      </Stack>\n\n      <Block title=\"Static mode\">\n        <StaticDateRangePicker\n          displayStaticWrapperAs=\"desktop\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(startProps, endProps) => (\n            <>\n              <TextField {...startProps} variant=\"standard\" />\n              <Box sx={{ mx: 2 }}>to</Box>\n              <TextField {...endProps} variant=\"standard\" />\n            </>\n          )}\n        />\n      </Block>\n    </Stack>\n  );\n}\n","import { useState } from 'react';\n// material\nimport { TabPanel, TabContext, TabList } from '@mui/lab';\nimport { styled } from '@mui/material/styles';\nimport { Box, Container, Tab } from '@mui/material';\n// routes\nimport { PATH_PAGE } from '../../../../routes/paths';\n// components\nimport Page from '../../../../components/Page';\nimport HeaderBreadcrumbs from '../../../../components/HeaderBreadcrumbs';\n//\nimport PickerDate from './PickerDate';\nimport PickerTime from './PickerTime';\nimport PickerDateTime from './PickerDateTime';\nimport PickerDateRange from './PickerDateRange';\n\n// ----------------------------------------------------------------------\n\nconst PICKERS = [\n  { name: 'Date', component: <PickerDate /> },\n  { name: 'DateTime', component: <PickerDateTime /> },\n  { name: 'DateRange', component: <PickerDateRange /> },\n  { name: 'Time', component: <PickerTime /> }\n];\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  paddingTop: theme.spacing(11),\n  paddingBottom: theme.spacing(15)\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function PickersComponent() {\n  const [value, setValue] = useState('1');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <RootStyle title=\"Components: Pickers | Minimal-UI\">\n      <Box\n        sx={{\n          pt: 6,\n          pb: 1,\n          mb: 10,\n          bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800')\n        }}\n      >\n        <Container maxWidth=\"lg\">\n          <HeaderBreadcrumbs\n            heading=\"Date / Time pickers\"\n            links={[{ name: 'Components', href: PATH_PAGE.components }, { name: 'Date / Time pickers' }]}\n            moreLink=\"https://mui.com/components/pickers\"\n          />\n        </Container>\n      </Box>\n\n      <Container maxWidth=\"lg\">\n        <TabContext value={value}>\n          <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\n            {PICKERS.map((tab, index) => (\n              <Tab disableRipple key={tab.name} label={tab.name} value={String(index + 1)} />\n            ))}\n          </TabList>\n\n          {PICKERS.map((tab, index) => (\n            <TabPanel key={tab.name} value={String(index + 1)} sx={{ mt: 5 }}>\n              {tab.component}\n            </TabPanel>\n          ))}\n        </TabContext>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"sourceRoot":""}